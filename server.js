require("dotenv").config();

const express = require("express");
const http = require("http");
const cors = require("cors");
const { Server } = require("socket.io");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { MongoClient, ServerApiVersion, ObjectId } = require("mongodb");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const { body, validationResult } = require("express-validator");
const sanitizeHtml = require("sanitize-html");
const { startNgrok } = require("./ngrokHelper"); // ‚úÖ –Ü–º–ø–æ—Ä—Ç ngrok –∑ –æ–∫—Ä–µ–º–æ–≥–æ —Ñ–∞–π–ª—É

const app = express();
const server = http.createServer(app);
const io = new Server(server);

app.use(express.json());
app.use(express.static("public"));

async function startServer() {
  try {
    // ‚úÖ –ó–∞–ø—É—Å–∫ ngrok
    const ngrokUrl = await startNgrok(3000);

    // ‚úÖ –î–æ–∑–≤–æ–ª–µ–Ω—ñ origin-–¥–∂–µ—Ä–µ–ª–∞
    const allowedOrigins = ["http://localhost:3000"];
    if (ngrokUrl) allowedOrigins.push(ngrokUrl);

    // ‚úÖ CORS
    app.use(cors({
      origin: function (origin, callback) {
        if (!origin) return callback(null, true);
        if (allowedOrigins.includes(origin)) {
          return callback(null, true);
        } else {
          return callback(new Error("CORS policy: –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è origin " + origin));
        }
      },
      methods: ["GET", "POST"],
      allowedHeaders: ["Content-Type", "Authorization"],
    }));

    // ‚úÖ HTTP-–∑–∞—Ö–∏—Å—Ç —á–µ—Ä–µ–∑ helmet
    app.use(
      helmet({
        contentSecurityPolicy: {
          directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'"],
            imgSrc: ["'self'", "data:"],
            connectSrc: ["'self'", ngrokUrl || "'self'"],
          },
        },
      })
    );

    // ‚úÖ Rate limiting
    app.use(rateLimit({
      windowMs: 15 * 60 * 1000,
      max: 100,
      standardHeaders: true,
      legacyHeaders: false,
    }));

    // ‚úÖ MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    const uri = process.env.MONGODB_URI;
    const JWT_SECRET = process.env.JWT_SECRET || "your_default_jwt_secret";

    const client = new MongoClient(uri, {
      serverApi: {
        version: ServerApiVersion.v1,
        strict: true,
        deprecationErrors: true,
      },
    });

    await client.connect();
    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas");

    const db = client.db("chat");
    const usersCollection = db.collection("users");
    const messagesCollection = db.collection("messages");

    const onlineUsers = new Map();

    // ‚úÖ Socket.io –ª–æ–≥—ñ–∫–∞
    io.on("connection", (socket) => {
      console.log("üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è");
      let currentUser = null;

      socket.on("user connected", (nickname) => {
        currentUser = nickname;
        onlineUsers.set(socket.id, nickname);
        io.emit("online users", Array.from(onlineUsers.values()));
      });

      socket.on("get history", async () => {
        try {
          const history = await messagesCollection.find({}).sort({ timestamp: 1 }).toArray();
          socket.emit("chat history", history);
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
          socket.emit("error", "–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é");
        }
      });

      socket.on("chat message", async (msg) => {
        try {
          const cleanMsg = sanitizeHtml(msg, { allowedTags: [], allowedAttributes: {} });
          if (!currentUser) {
            socket.emit("error", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π");
            return;
          }
          const messageObj = {
            text: cleanMsg,
            sender: currentUser,
            timestamp: new Date(),
          };
          await messagesCollection.insertOne(messageObj);
          io.emit("chat message", messageObj);
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
          socket.emit("error", "–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
        }
      });

      socket.on("disconnect", () => {
        if (currentUser) {
          onlineUsers.delete(socket.id);
          io.emit("online users", Array.from(onlineUsers.values()));
        }
        console.log("üî¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤");
      });
    });

    // ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    app.post(
      "/api/register",
      [
        body("email").isEmail().normalizeEmail(),
        body("nickname").trim().isLength({ min: 3 }),
        body("password").isLength({ min: 6 }),
      ],
      async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

        const { email, password, nickname } = req.body;
        const existingUser = await usersCollection.findOne({ email });
        if (existingUser) return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });

        const hashedPassword = await bcrypt.hash(password, 10);
        await usersCollection.insertOne({
          email,
          password: hashedPassword,
          nickname,
          role: "user",
        });
        res.status(201).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ" });
      }
    );

    // ‚úÖ –õ–æ–≥—ñ–Ω
    app.post(
      "/api/login",
      [
        body("email").isEmail().normalizeEmail(),
        body("password").isLength({ min: 6 }),
      ],
      async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

        const { email, password } = req.body;
        const user = await usersCollection.findOne({ email });
        if (!user || !(await bcrypt.compare(password, user.password))) {
          return res.status(401).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å" });
        }

        const token = jwt.sign(
          {
            userId: user._id,
            email: user.email,
            role: user.role,
            nickname: user.nickname,
          },
          JWT_SECRET,
          { expiresIn: "1h" }
        );

        res.json({ token, nickname: user.nickname });
      }
    );

    // ‚úÖ Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    function authenticateToken(req, res, next) {
      const authHeader = req.headers["authorization"];
      const token = authHeader && authHeader.split(" ")[1];
      if (!token) return res.status(401).json({ message: "–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π" });

      jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return res.status(403).json({ message: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        req.user = user;
        next();
      });
    }

    // ‚úÖ –ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
    app.get("/api/profile", authenticateToken, async (req, res) => {
      const user = await usersCollection.findOne(
        { _id: new ObjectId(req.user.userId) },
        { projection: { password: 0 } }
      );
      res.json(user);
    });

    // ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.listen(3000, "0.0.0.0", () => {
      console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000");
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:", error);
  }
}

startServer();
