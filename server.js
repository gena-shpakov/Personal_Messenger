// ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–∏–π server.js –∑ JWT-–ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–ª—è Socket.io
const envPath = process.env.NODE_ENV === "production" ? "/etc/secrets/.env" : ".env";
require("dotenv").config({ path: envPath });

const express = require("express");
const http = require("http");
const cors = require("cors");
const { Server } = require("socket.io");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { MongoClient, ServerApiVersion, ObjectId } = require("mongodb");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const { body, validationResult } = require("express-validator");
const sanitizeHtml = require("sanitize-html");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*", // –¥–æ–∑–≤—ñ–ª –¥–ª—è –≤—Å—ñ—Ö frontend-–¥–æ–º–µ–Ω—ñ–≤
    methods: ["GET", "POST"],
    allowedHeaders: ["Content-Type", "Authorization"]
  }
});

app.use(express.json());
app.use(express.static("public"));

//–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // HTTP-–∑–∞—Ö–∏—Å—Ç —á–µ—Ä–µ–∑ helmet
    app.use(
      helmet({
        contentSecurityPolicy: false,
      })
    );

    // Rate limiting
    app.use(
      rateLimit({
        windowMs: 15 * 60 * 1000,
        max: 2000,
        standardHeaders: true,
        legacyHeaders: false,
      })
    );

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    const uri = process.env.MONGODB_URI;
    const JWT_SECRET = process.env.JWT_SECRET || "5e9f90ece308f253c69726f539f879c557ca5f6324f0d324eb97a1aff193c6cdf350385b93d0d7ab1221bd7132fd351377b76c35d488b31f693dc2044ea16a51";

    const client = new MongoClient(uri, {
      serverApi: {
        version: ServerApiVersion.v1,
        strict: true,
        deprecationErrors: true,
      },
    });

    await client.connect();
    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas");

    const db = client.db("chat");
    const usersCollection = db.collection("users");
    const messagesCollection = db.collection("messages");

    const onlineUsers = new Map();

    // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT –ø–µ—Ä–µ–¥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º
    io.use((socket, next) => {
      const token = socket.handshake.auth.token;
      if (!token) {
        return next(new Error("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: —Ç–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"));
      }

      jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return next(new Error("–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω"));
        socket.user = user;
        next();
      });
    });

    // ‚úÖ Socket.io –ª–æ–≥—ñ–∫–∞ –∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
    io.on("connection", (socket) => {
      console.log("üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è", socket.user.nickname);

      const currentUser = socket.user.nickname;
      onlineUsers.set(socket.id, currentUser);
      io.emit("online users", Array.from(onlineUsers.values()));

      //–Ø–∫—â–æ - –∞–¥–º—ñ–Ω
      if (socket.user.role === "admin") {
    socket.emit("–¥–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É");

    socket.on("–æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", async () => {
      const users = await usersCollection.find({}, { projection: { password: 0 } }).toArray();
      socket.emit("—É—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", users);
    });

    socket.on("–æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", async () => {
      const messages = await messagesCollection.find({}).toArray();
      socket.emit("—É—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", messages);
    });
  }

      //–ó–∞–ø–∏—Ç —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
      socket.on("get history", async () => {
        try {
          const history = await messagesCollection.find({}).sort({ timestamp: 1 }).toArray();
          socket.emit("chat history", history);
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
          socket.emit("error", "–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é");
        }
      });

      //–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      socket.on("chat message", async (msg) => {
        try {
          const cleanMsg = sanitizeHtml(msg, { allowedTags: [], allowedAttributes: {} });
          const messageObj = {
            text: cleanMsg,
            sender: socket.user.nickname,
            timestamp: new Date(),
          };
          await messagesCollection.insertOne(messageObj);
          io.emit("chat message", messageObj);
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
          socket.emit("error", "–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
        }
      });

      //–í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      socket.on("disconnect", () => {
        onlineUsers.delete(socket.id);
        io.emit("online users", Array.from(onlineUsers.values()));
        console.log("üî¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤", currentUser);
      });
    });

    // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    app.post(
      "/api/register",
      [
        body("email").isEmail().normalizeEmail(),
        body("nickname").trim().isLength({ min: 3 }),
        body("password").isLength({ min: 4 }),
      ],
      async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) return res.status(400).json({ errors: errors.array() });

        const { email, password, nickname } = req.body;
        const existingUser = await usersCollection.findOne({ email });
        if (existingUser) return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î" });

        const hashedPassword = await bcrypt.hash(password, 10);
        const role = adminKey === process.env.ADMIN_KEY ? "admin" : "user";

        await usersCollection.insertOne({ email, password: hashedPassword, nickname, role});
        res.status(201).json({ message: `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —è–∫ ${role}` });
      }
    );

    // –õ–æ–≥—ñ–Ω
    app.post("/api/login", async (req, res) => {
      const { email, password } = req.body;
      const user = await usersCollection.findOne({ email });
      if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å" });
      }

      const token = jwt.sign(
        {
          userId: user._id,
          email: user.email,
          role: user.role,
          nickname: user.nickname,
        },
        JWT_SECRET,
        { expiresIn: "1h" }
      );

      res.json({ token, nickname: user.nickname });
    });

    // –ó–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
    function authenticateToken(req, res, next) {
      const authHeader = req.headers["authorization"];
      const token = authHeader && authHeader.split(" ")[1];
      if (!token) return res.status(401).json({ message: "–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π" });

      jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return res.status(403).json({ message: "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω" });
        req.user = user;
        next();
      });
    }

    app.get("/api/profile", authenticateToken, async (req, res) => {
      const user = await usersCollection.findOne(
        { _id: new ObjectId(req.user.userId) },
        { projection: { password: 0 } }
      );
      res.json(user);
    });

    // Healthcheck –¥–ª—è Render
    app.get("/health", (req, res) => res.send("OK"));

    const PORT = process.env.PORT || 3000;
    server.listen(PORT, "0.0.0.0", () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`);
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:", error);
  }
}

startServer();