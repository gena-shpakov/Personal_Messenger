// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É .env
require("dotenv").config();

const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const { MongoClient, ServerApiVersion } = require("mongodb");

const app = express();                    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É Express
const server = http.createServer(app);    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
const io = new Server(server);            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Socket.io

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è MongoDB URI –∑ —Ñ–∞–π–ª—É .env
const uri = process.env.MONGODB_URI;

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è MongoDB –∫–ª—ñ—î–Ω—Ç–∞
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

const onlineUsers = new Set(); // –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

async function startServer() {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
    await client.connect();
    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas");

    // –í–∏–±—ñ—Ä –±–∞–∑–∏ —Ç–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó
    const db = client.db("chat");
    const messagesCollection = db.collection("messages");

    // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ (HTML, CSS, JS) ‚Äî –ø–∞–ø–∫–∞ "public"
    app.use(express.static("public"));

    // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å —á–µ—Ä–µ–∑ Socket.io
    io.on("connection", (socket) => {
      console.log("üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è");

      socket.on("user connected", (nickname) => {
        socket.nickname = nickname;
        onlineUsers.add(nickname); // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–∫—É
        io.emit("online users", Array.from(onlineUsers));
      });

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–æ–≤–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      socket.on("get history", async () => {
        try {
          const history = await messagesCollection
            .find({})
            .sort({ timestamp: 1 }) // –í—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ –Ω–æ–≤–∏—Ö
            .toArray();
          socket.emit("chat history", history); // –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –∫–ª—ñ—î–Ω—Ç
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
        }
      });

      // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –π–æ–≥–æ —É –ë–î
      socket.on("chat message", async (msg) => {
        try {
          // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ MongoDB
          await messagesCollection.insertOne({
            text: msg,
            timestamp: new Date(),
          });

          // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
          io.emit("chat message", msg);
        } catch (error) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
        }
      });

      // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      socket.on("disconnect", () => {
        console.log("üî¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤");
      });
    });

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.listen(3000, "0.0.0.0", () => {
      console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000");
    });

  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:", error);
  }
}

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
startServer();
