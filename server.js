require("dotenv").config(); // –º–∞—î –±—É—Ç–∏ –ü–ï–†–®–ò–ú!

const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const { MongoClient, ServerApiVersion } = require("mongodb");

const app = express();
const server = http.createServer(app);
const io = new Server(server);

// === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ===
const uri = process.env.MONGO_URI;

const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

async function startServer() {
  try {
    await client.connect();
    console.log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas");

    const db = client.db("chat"); // –Ω–∞–∑–≤–∞ –±–∞–∑–∏
    const messagesCollection = db.collection("messages"); // –∫–æ–ª–µ–∫—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    app.use(express.static("public"));

    io.on("connection", async (socket) => {
      console.log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è");

      //–ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      const recentMessages = await messagesCollection
        .find({})
        .sort({ timestamp: 1 })
        .limit(50) // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        .toArray();


      //–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó—ó –ª–∏—à–µ –Ω–æ–≤–æ–º—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–º—É –∫–ª—ñ—î–Ω—Ç—É  
      socket.emitWithAck("chat history", recentMessages);

      //–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      socket.on("chat message", async (msg) => {
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É
        await messagesCollection.insertOne({
          text: msg,
          timestamp: new Date(),
        });

        io.emit("chat message", msg);
      });

      socket.on("disconnect", () => {
        console.log("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤");
      });
    });

    server.listen(3000, "0.0.0.0", () => {
      console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000");
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB:", error);
  }
}

startServer();
